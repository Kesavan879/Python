# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        def countListNode(head):
            count = 0
            cur = head
            while (cur):
                cur = cur.next
                count += 1
            return count

        # B stand for bigger one
        def traverseListNode(headB, countA, countB): 
            cur = headB
            count = countB-countA
            while (count):
                cur = cur.next
                count -= 1
            return cur
        
        # define count
        countA = countListNode(headA)
        countB = countListNode(headB)

        if (countB > countA):
            curB = traverseListNode(headB, countA, countB)
            curA = headA
            while (countA):

                if (curB == curA):
                    return curB
                
                curB = curB.next
                curA = curA.next
                countA -= 1
            return None
        elif (countA > countB):
            curA = traverseListNode(headA,countB,countA)
            curB = headB
            while(countB):

                if(curB == curA):
                    return curB
                curB = curB.next
                curA = curA.next
                countB -= 1
            return None
        else:
            curA = headA
            curB = headB
            while(countB):
                if(curB == curA):
                    return curB
                curB = curB.next
                curA = curA.next
                countB -= 1
            return None



            
